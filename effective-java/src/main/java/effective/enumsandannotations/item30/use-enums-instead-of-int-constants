//The int enum pattern
public static final int APPLE_FUJI = 0;
public static final int APPLE_PIPPIN = 1;

int enum pattern provides nothing in the way of type safety and little in the way of convenience.
Programs that use the int enum pattern are brittle.
There is no easy way to translate int enum constants into printable.

The basic idea behind Java's enum types is simple: they are classes that export one instance for each enumeration constant via a public static final field.
Enum types are effectively final, by virtue of having no accessible constructors.
In other words, enum types are instance-controlled. They are a generalization of singletons, which are essentially single-element enums.
Enum types with identically named constants coexist peacefully because each type has its own namespace.

Enums are, generally speaking, comparable in performance to int constants. A minor performance disadvantage of enum over
int is that there is a space and time cost to load and initialize enum types. Except on resource-constrained devices, such
as cell phones and toasters, this is unlikely to be noticeable in practice.

So when should you use enums? Anytime you need a fixed set of constants. Of course, this includes "natural enumerated types",
such as the planets, the days of the week, and the chess pieces. But it also includes other sets for which you know all the
possible values at compile time, such as choices on a menu, operation codes, and command line flags. It is not necessary that
the set of constants in an enum type stay fixed for all time. The enum feature was specifically designed to allow for binary
compatible evolution of enum type.